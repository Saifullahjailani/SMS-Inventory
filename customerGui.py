# -*- coding: utf-8 -*-
import sys

# Form implementation generated from reading ui file 'customerWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import addCustomerWindowGui
import logic.customer
import receiptWindowGui
import receipt_show
import stylesheet
from logic import sales
from tableModel import CustomTableModel
from stylesheet import *


class CustomerWindow(object):
    def __init__(self, data, receipt_mode=False, key=None):
        self.data = data
        self.selected_row = []
        self.receipt_mode = receipt_mode
        self.key = key
    def setupUi(self, MainWindow, logic=None):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(800, 597)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.customersTable = QtWidgets.QTableView(self.centralwidget)
        self.customersTable.setGeometry(QtCore.QRect(10, 10, 781, 271))
        self.customersTable.setStyleSheet(TABLE_STYLE)
        self.customersTable.setAlternatingRowColors(True)
        self.customersTable.setObjectName("customersTable")

        self.search_key = QtWidgets.QLineEdit(self.centralwidget)
        self.search_key.setGeometry(QtCore.QRect(30, 350, 191, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.search_key.setFont(font)
        self.search_key.setStyleSheet(TEXT_BOX_STYLE)
        self.search_key.setText("")
        self.search_key.setObjectName("name")
        self.is_name = QtWidgets.QRadioButton("name#")
        self.is_ph = QtWidgets.QRadioButton("ph#")
        self.search_key.textChanged.connect(self.activate_search)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.is_ph.setFont(font)
        self.is_name.setFont(font)
        layout = QtWidgets.QHBoxLayout()
        layout.addWidget(self.is_name)
        layout.addWidget(self.is_ph)
        widget = QtWidgets.QWidget(self.centralwidget)
        widget.setLayout(layout)
        widget.setGeometry(QtCore.QRect(250, 350, 191, 41))
        self.searchButton = QtWidgets.QPushButton(self.centralwidget)
        self.searchButton.setGeometry(QtCore.QRect(470, 350, 221, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.searchButton.setFont(font)
        self.searchButton.setStyleSheet(get_opacity(0.5))
        self.searchButton.setObjectName("searchButton")
        self.searchButton.setEnabled(False)

        self.backButton = QtWidgets.QPushButton(self.centralwidget)
        self.backButton.setGeometry(QtCore.QRect(560, 500, 221, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.backButton.setFont(font)
        self.backButton.setStyleSheet(BUTTON_STYLE)
        self.backButton.setObjectName("backButton")
        self.backButton.clicked.connect(lambda: self.data.draw(self.data.homeWindow))
        self.newCustomerButton = QtWidgets.QPushButton(self.centralwidget)
        self.newCustomerButton.setGeometry(QtCore.QRect(560, 440, 221, 41))
        self.newCustomerButton.setFont(font)
        self.newCustomerButton.setStyleSheet(BUTTON_STYLE)
        self.newCustomerButton.setObjectName("newCustomerButton")

        self.editCustomerButton = QtWidgets.QPushButton(self.centralwidget)
        self.editCustomerButton.setGeometry(QtCore.QRect(300, 440, 221, 41))
        self.editCustomerButton.setFont(font)
        self.editCustomerButton.setStyleSheet(get_opacity(0.5))
        self.editCustomerButton.setObjectName("editCustomerButton")
        self.editCustomerButton.setEnabled(False)

        self.generateReceiptButton = QtWidgets.QPushButton(self.centralwidget)
        self.generateReceiptButton.setGeometry(QtCore.QRect(300, 500, 221, 41))
        self.generateReceiptButton.setFont(font)
        self.generateReceiptButton.setStyleSheet(get_opacity(0.5))
        self.generateReceiptButton.setObjectName("generateReceiptButton")
        self.generateReceiptButton.setEnabled(False)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        add_customer_window = addCustomerWindowGui.AddCustomer(self.data)
        self.newCustomerButton.clicked.connect(lambda: self.data.draw(add_customer_window))
        self.searchButton.clicked.connect(lambda: self.search())
        self.is_ph.setChecked(True)

        customers_list = []
        headers = ['ID', 'Name', 'Address', 'Ph#']
        model = CustomTableModel(customers_list, headers)
        self.customersTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.customersTable.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.customersTable.setSelectionMode(QtWidgets.QTableView.SingleSelection)
        self.customersTable.setModel(model)
        self.scroll_area = QtWidgets.QScrollArea(self.centralwidget)
        self.scroll_area.setWidget(self.customersTable)
        self.scroll_area.setGeometry(QtCore.QRect(10, 10, 781, 271))
        self.customersTable.selectionModel().selectionChanged.connect(self.row_selected)
        self.editCustomerButton.clicked.connect(self.edit)
        self.generateReceiptButton.clicked.connect(self.gen_receipt)

        if self.receipt_mode:
            self.editCustomerButton.hide()
            self.newCustomerButton.hide()
            self.generateReceiptButton.clicked.connect(self.recipts)
            self.search_key.setText(self.key)

    def recipts(self):
        if not self.selected_row:
            return
        row = self.selected_row[0]
        id, name, address, ph_num = self.customersTable.model().get_item(row)
        customer = logic.customer.Customer(id, name, address, ph_num)
        while True:
            if self.data.db.connect():
                break
        records = sales.Sales.fetch_with_customer(id, self.data.db)
        r = receipt_show.ReciptShow(self.data, records, self)
        self.data.draw(r)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Customers"))
        self.search_key.setPlaceholderText(_translate("MainWindow", "Search Key"))
        self.searchButton.setText(_translate("MainWindow", "Search"))
        self.backButton.setText(_translate("MainWindow", "Back"))
        self.newCustomerButton.setText(_translate("MainWindow", "New Customer"))
        self.editCustomerButton.setText(_translate("MainWindow", "Edit Customer"))
        self.generateReceiptButton.setText(_translate("MainWindow", "Receipts" if self.receipt_mode else "Generate Receipt"))

    def gen_receipt(self):
        if not self.selected_row:
            return
        row = self.selected_row[0]
        id, name, address, ph_num = self.customersTable.model().get_item(row)
        customer = logic.customer.Customer(id, name, address, ph_num)
        receipt = receiptWindowGui.ReceiptWindow(self.data, customer)
        self.data.draw(receipt)

    def search(self):
        key = self.search_key.text().strip()
        model = self.customersTable.model()
        model.clear()
        if key == "":
            return
        while not self.data.db.connect():
            self.data.db.connect()
        model.change_data(logic.customer.Customer.fetch(self.data.db, key, self.is_ph.isChecked()))
        self.data.db.disconnect()

    def activate_search(self):
        txt = self.search_key.text()
        if txt == "":
            self.searchButton.setEnabled(False)
            self.searchButton.setStyleSheet(get_opacity(0.5))
        else:
            self.searchButton.setEnabled(True)
            self.searchButton.setStyleSheet(get_opacity(1))

        self.searchButton.repaint()

    def activate_selection_button(self):
        self.editCustomerButton.setEnabled(True)
        self.editCustomerButton.setStyleSheet(get_opacity(1))
        self.generateReceiptButton.setEnabled(True)
        self.generateReceiptButton.setStyleSheet(get_opacity(1))

    def deactivate_selection_button(self):
        self.editCustomerButton.setEnabled(False)
        self.editCustomerButton.setStyleSheet(get_opacity(0.5))
        self.generateReceiptButton.setEnabled(False)
        self.editCustomerButton.setStyleSheet(get_opacity(0.5))

    def row_selected(self, selected, deselected):
        self.selected_row = selected.indexes()
        if not self.selected_row:
            self.deactivate_selection_button()
        else:
            self.activate_selection_button()

    def edit(self):
        if not self.selected_row:
            return
        row = self.selected_row[0]
        id, name, address, ph_num = self.customersTable.model().get_item(row)
        customer = logic.customer.Customer(id, name, address, ph_num)

        edit_window = addCustomerWindowGui.AddCustomer(self.data, customer)
        self.data.draw(edit_window)


    def mimic_push(self):
        self.activate_search()
        self.searchButton.click()