# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'productsWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from addProduct import AddProduct
import logic.product
from tableModel import CustomTableModel

class ProductsWindow(object):
    def __init__(self, data):
        self.data = data

    def setupUi(self, productsWindow):
        productsWindow.setObjectName("Products")
        productsWindow.setFixedSize(800, 597)
        self.centralwidget = QtWidgets.QWidget(productsWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.productTable = QtWidgets.QTableView(self.centralwidget)
        self.productTable.setGeometry(QtCore.QRect(10, 10, 591, 541))
        self.productTable.setStyleSheet("QTableWidget::item {\n"
                                        "    background-color: #f0f0f0; /* Set the default background color for table items */\n"
                                        "}\n"
                                        "\n"
                                        "QTableWidget::item:nth-child(even) {\n"
                                        "    background-color: #ffffff; /* Set the background color for even rows */\n"
                                        "}\n"
                                        "\n"
                                        "QTableWidget::item:hover {\n"
                                        "    background-color: #c0c0c0; /* Set the background color for hovered items */\n"
                                        "}")
        self.productTable.setAlternatingRowColors(True)
        self.productTable.setObjectName("productTable")
        self.products_data = self.get_products()
        headers = ['Product ID', 'Name', 'Price']
        model = CustomTableModel(self.products_data, headers)
        self.productTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.productTable.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.productTable.setModel(model)
        self.scroll_area = QtWidgets.QScrollArea(self.centralwidget)
        self.scroll_area.setWidget(self.productTable)
        self.scroll_area.setGeometry(QtCore.QRect(10, 10, 591, 541))
        self.backButton = QtWidgets.QPushButton(self.centralwidget)
        self.backButton.setGeometry(QtCore.QRect(620, 500, 148, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.backButton.setFont(font)
        self.backButton.setStyleSheet("QPushButton {\n"
                                      "    background-color: #4d4d4d;\n"
                                      "    color: #ffffff;\n"
                                      "    padding: 8px 16px;\n"
                                      "    border-radius: 20px;\n"
                                      "}\n"
                                      "\n"
                                      "QPushButton:hover {\n"
                                      "    background-color: #595959;\n"
                                      "}\n"
                                      "\n"
                                      "QPushButton:pressed {\n"
                                      "    background-color: #3d3d3d;\n"
                                      "}")
        self.backButton.setObjectName("backButton")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(600, 60, 201, 241))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(30, 0, 30, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.addButton = QtWidgets.QPushButton(self.widget)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.addButton.setFont(font)
        self.addButton.setStyleSheet("QPushButton {\n"
                                     "    background-color: #4d4d4d;\n"
                                     "    color: #ffffff;\n"
                                     "    padding: 8px 16px;\n"
                                     "    border-radius: 20px;\n"
                                     "}\n"
                                     "\n"
                                     "QPushButton:hover {\n"
                                     "    background-color: #595959;\n"
                                     "}\n"
                                     "\n"
                                     "QPushButton:pressed {\n"
                                     "    background-color: #3d3d3d;\n"
                                     "}")

        self.verticalLayout.addWidget(self.addButton)

        font = QtGui.QFont()
        font.setPointSize(16)

        productsWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(productsWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        productsWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(productsWindow)
        self.statusbar.setObjectName("statusbar")
        productsWindow.setStatusBar(self.statusbar)

        self.retranslateUi(productsWindow)
        QtCore.QMetaObject.connectSlotsByName(productsWindow)
        self.bindings()


    def retranslateUi(self, productsWindow):
        _translate = QtCore.QCoreApplication.translate
        productsWindow.setWindowTitle(_translate("productsWindow", "Products"))
        self.backButton.setText(_translate("productsWindow", "Back"))
        self.addButton.setText(_translate("productsWindow", "Add"))


    def bindings(self):
        prod = AddProduct(self.data)
        self.addButton.clicked.connect(lambda: self.data.draw(prod))
        self.backButton.clicked.connect(lambda: self.data.draw(self.data.homeWindow))


    def get_products(self):
        self.data.db.connect()
        products = logic.product.Product.get_star(self.data.db)
        self.data.db.disconnect()
        return products



