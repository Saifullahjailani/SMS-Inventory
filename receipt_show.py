# -*- coding: utf-8 -*-
import os.path
from functools import reduce

# Form implementation generated from reading ui file 'GUI\receiptsShow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import stylesheet
from tableModel import CustomTableModel
import logic.sales as sales
import logic.customer as customer
import logic.generate_pdf as pdf


class ReciptShow(object):
    def __init__(self, data, tableList, prev):
        self.data = data
        self.tableList = tableList
        self.prev = prev

    def setupUi(self, ReciptWindow):
        ReciptWindow.setObjectName("ReciptWindow")
        ReciptWindow.resize(1133, 866)
        self.centralwidget = QtWidgets.QWidget(ReciptWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.customersTable = QtWidgets.QTableView(self.centralwidget)
        self.customersTable.setGeometry(QtCore.QRect(0, 0, 1131, 751))
        self.customersTable.setStyleSheet(stylesheet.TABLE_STYLE)
        headers = ['ReceiptID', 'Name', 'Ph#', 'Address', 'Discounted Total', 'Date']
        model = CustomTableModel(self.tableList, headers)
        self.customersTable.setWordWrap(True)
        self.customersTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        self.customersTable.horizontalHeader().setStretchLastSection(True)
        self.customersTable.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.customersTable.setSelectionMode(QtWidgets.QTableView.SingleSelection)
        self.customersTable.setModel(model)

        self.scroll_area = QtWidgets.QScrollArea(self.centralwidget)
        self.scroll_area.setWidget(self.customersTable)
        self.scroll_area.setGeometry(QtCore.QRect(0, 0, 1131, 751))

        self.customersTable.setAlternatingRowColors(True)
        self.customersTable.setObjectName("customersTable")
        self.backButton = QtWidgets.QPushButton(self.centralwidget)
        self.backButton.setGeometry(QtCore.QRect(870, 760, 221, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.backButton.setFont(font)
        self.backButton.setStyleSheet(stylesheet.BUTTON_STYLE)
        self.backButton.setObjectName("backButton")
        self.open = QtWidgets.QPushButton(self.centralwidget)
        self.open.setGeometry(QtCore.QRect(620, 760, 221, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.open.setFont(font)
        self.open.setStyleSheet(stylesheet.get_opacity(0.5))
        self.open.setObjectName("backButton_2")
        ReciptWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(ReciptWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1133, 21))
        self.menubar.setObjectName("menubar")
        ReciptWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(ReciptWindow)
        self.statusbar.setObjectName("statusbar")
        ReciptWindow.setStatusBar(self.statusbar)
        self.open.setEnabled(False)
        self.selected = []
        self.customersTable.selectionModel().selectionChanged.connect(self.row_selected)
        self.backButton.clicked.connect(lambda: self.data.draw(self.prev))
        self.open.clicked.connect(lambda : self.gen_pdf(self.selected.pop()))
        self.retranslateUi(ReciptWindow)
        QtCore.QMetaObject.connectSlotsByName(ReciptWindow)

    def row_selected(self, selected, des):
        self.selected = selected.indexes()
        if not self.selected:
            self.open.setEnabled(False)
            self.open.setStyleSheet(stylesheet.get_opacity(0.5))
        else:
            self.open.setEnabled(True)
            self.open.setStyleSheet(stylesheet.get_opacity(1))

        self.open.repaint()

    def gen_pdf(self, i):
        rec_id, name, ph, address, total, date = self.customersTable.model().get_item(i)
        cust = customer.Customer(None, name, address, ph)
        j = 0
        while not self.data.db.connect():
            if j >= 10:
                self.data.exit()
            self.data.db.connect()
            j += 1
        records = sales.Sales.fetch(rec_id, self.data.db)
        self.data.db.disconnect()
        total = round(sum(x[6] for x in records),2)
        path = os.path.join(self.data.receipts_path, rec_id)
        pdf.generate_receipt(str(path), rec_id, cust, records, str(total), True, date)

    def retranslateUi(self, ReciptWindow):
        _translate = QtCore.QCoreApplication.translate
        ReciptWindow.setWindowTitle(_translate("ReciptWindow", "MainWindow"))
        self.backButton.setText(_translate("ReciptWindow", "Back"))
        self.open.setText(_translate("ReciptWindow", "Open"))

    def double_clicked(self, index):
        row = index.row()
        print('two Time Clicked at index: ', row[0])

    def one_time_clicked(self, index):
        row = index.row()
        print('One Time Clicked at index: ', row[0])
